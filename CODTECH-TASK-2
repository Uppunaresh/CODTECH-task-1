pip install requests
import socket
import requests
import subprocess
import platform

# Function to scan for open ports
def scan_ports(target, port_range):
    open_ports = []
    for port in port_range:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    return open_ports

# Function to check for outdated software versions
def check_software_version(software_name, current_version):
    # This is a simple example; in a real scenario, you'd use an API or database
    vulnerabilities = {
        'nginx': '1.18.0',
        'apache': '2.4.46',
        'mysql': '8.0.21'
    }
    
    if software_name in vulnerabilities:
        if current_version < vulnerabilities[software_name]:
            return f"{software_name} is outdated! Current version: {current_version}, Latest version: {vulnerabilities[software_name]}"
    return f"{software_name} is up to date."

# Function to get the OS version
def get_os_version():
    return platform.platform()

# Main function to run the scanner
def main(target):
    print(f"Scanning {target} for open ports...")
    open_ports = scan_ports(target, range(1, 1025))  # Scanning ports 1-1024
    if open_ports:
        print(f"Open ports: {open_ports}")
    else:
        print("No open ports found.")

    # Example software version checks
    print("Checking for outdated software versions...")
    print(check_software_version('nginx', '1.17.0'))  # Example current version
    print(check_software_version('apache', '2.4.45'))  # Example current version

    print("Operating System Version:", get_os_version())

if __name__ == "__main__":
    target_ip = input("Enter the target IP address or hostname: ")
    main(target_ip)
python vuln_scanner.py
